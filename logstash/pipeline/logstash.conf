input {
  file {
    id => "nginx_access"
    path => ["/logs/access.log"]
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb_access"
  }
  file {
    id => "nginx_error"
    path => ["/logs/error.log"]
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb_error"
    codec => plain { charset => "UTF-8" }
  }
}

filter {
  if [path] =~ "access.log" {
    grok {
      match => {
        "message" => [
          // common nginx combined format
          '%{IPORHOST:client.ip} - %{DATA:user.ident} %{DATA:user.name} \[%{HTTPDATE:nginx.time}\] "%{WORD:http.request.method} %{DATA:url.original} HTTP/%{NUMBER:http.version}" %{NUMBER:http.response.status_code:int} (?:%{NUMBER:http.response.body.bytes:int}|-) "%{DATA:http.request.referrer}" "%{DATA:user_agent.original}"'
        ]
      }
      tag_on_failure => ["_nginx_grok_fail"]
    }

    # derive url.path from url.original
    dissect {
      mapping => { "url.original" => "%{url.path}?%{url.query}" }
      convert_datatype => { }
      remove_if_missing => true
    }

    date {
      match => ["nginx.time","dd/MMM/YYYY:HH:mm:ss Z"]
      target => "@timestamp"
      remove_field => ["nginx.time"]
    }

    useragent {
      source => "user_agent.original"
      target => "user_agent"
    }

    mutate {
      add_field => {
        "event.dataset" => "nginx.access"
      }
      remove_field => ["@version","host","agent","ecs","log","path"]
    }
  } else if ([path] =~ "error.log") {
    grok {
      match => {
        "message" => [
          // matches e.g.: 2025/08/26 13:12:34 [error] 123#0: *1 message here
          '%{YEAR:tmp.y}/%{MONTHNUM:tmp.m}/%{MONTHDAY:tmp.d} %{TIME:tmp.t} \[%{LOGLEVEL:log.level}\] %{NUMBER:process.pid:int}#%{NUMBER:process.thread.id:int}:(?: \*%{NUMBER:nginx.error.connection_id:int})? %{GREEDYDATA:message}'
        ]
      }
      tag_on_failure => ["_nginx_error_grok_fail"]
    }
    mutate {
      add_field => { "event.dataset" => "nginx.error" }
    }
    date {
      match => ["tmp.y","yyyy"]
      target => "@timestamp"
    }
    mutate { remove_field => ["tmp.y","tmp.m","tmp.d","tmp.t","@version","host","agent","ecs","log","path"] }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    user  => "elastic"
    password => "${ELASTIC_PASSWORD}"
    index => "%{[event.dataset]}-%{+YYYY.MM.dd}"
  }
  # stdout { codec => rubydebug } # uncomment when debugging
}
